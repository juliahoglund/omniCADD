#####################
##### Step one: #####
#####################
option: 'ancestor'
species: 'sus_scrofa'

### RULE MARK ANCESTOR###
# Identifies the last common ancestor between two given species and marks it with an identifier.
# Manual input:
#         'ancestor',   the ancestor of interest (example: Human_Chimp)
#         'sp1',        first species of interest
#         'sp2',        second species of interst
#         'sp1_ab',     abbreviation of the scientific name of sp1
#         'sp2_ab',     abbreviation of the scientific name of sp2
#         'species',    scientific name of the first species of interest (example: mus_musculus)
1_inp_path: './fulldata/'
1_ancestor: 'Pig_Cow'
1_file_ident: '43_mammals.epo'
1_sp1: 'Pig'
1_sp2: 'Cow'
1_sp1_ab: 'Sscr'
1_sp2_ab: 'Btau'

### RULE MARK OUTGROUP ###
# Identifies the species of interest and marks it with an identifier.
# Manual input:
#         'ancestor',  sequence ( = species) which should be marked as ancestror
#         'species',   scientific name of the (reference) species of interest (example: mus_musculus)
1_1_ancestor: 'bos_taurus'

### RULE MAFTOOLS ###
# 1. Removes all duplicate sequences and keeps only the one sequence that is the most similar to the block consensus.
# 2. Flips all alignment blocks in which the species of interest and its ancestors have been on the negative strand.
#    Not all strand are flipped, thus later the alignment blocks with sequences that are still on the minus strand needs to be removed.
# 3. Reorders species within any alignment block, so that the wanted species are in front.
#   (it also removes sequences that are not from species given in the order)
# Manual input:
#        'marked',      path to folder (including prefix of files) with marked alignment files
#        'genome',      path to (reference) genome including the prefix
#        'filtered',    path to folder (including prefix of files) with filtered files (to be computed)
#        'order',       species and ancestor in the desired order, separated only by commas
#        'stranded',    path to folder (including prefic of files) with files with flipped strands
#        'rowpath',     prefix to use for the last files, after reordering rows
#        'clean'        remove intermediate files after computation [yes/no]
#        'previous'     remove marked files from previous step (mark ancestor) after computation [yes/no]
2_marked: 'marked/marked_'
2_genome: './Sus_scrofa_ref'
2_order: 'sus_scrofa,Ancestor_Pig_Cow,bos_taurus'
2_stranded: './mSTR/mSTR_'
2_rowpath: './mRO/mRO_'
2_filtered: './mDF/mDF_'
2_clean: 'no'
2_previous: 'no'

### RULE SORT BY CHROMOSOME ##
# Creates one maf file for each chromosome,
# as each chromosome might have multiple maf files.
# This is due to that each maf file can only contain 200 alignment blocks.
# Should not contain maf files from 'scaffolds'.
# Manual input:
#        'species',     name of species, based of which the chromosomes should be ordered
#        'path'         path to folder with processed files by mafRowOrderer
#        'prefix'       prefix of processed files (default = mRO_mStr_mDF_)
#        'ordered'      directory within which the new output will be saved
#        'clean'        remove intermediate files (from previous step) after computation [yes/no]
3_path: 'mRO/'
3_prefix: 'mRO_mSTR_mDF_'
3_ordered: 'sorted'
3_clean: 'no'

### RULE SORT MSA BLOCKS ###
# Sorts alignment blocks with respect to coordinates of the first species of interest using its genome.
# If this part of the pipe was performed before, all .fai files should be removed in the directory of the genome.
# Manual input:
#        'path',       Path to input folder (i.e. output from previous step)
#        'species'     Species of interest
#        'ordered'     directory within which the new output will be saved
#        'clean'       remove intermediate files after computation [yes/no]
4_path: 'sorted/'
4_ordered: 'sortedMSA'
4_clean: 'no'

### RULE REMOVE UNWANTED SPECIES ###
# Removes other species with similar names to the species of interest from all alignment blocks.
# Manual input:
#        'path',       path to folder with mafSorted_EPO files.
#        'fileprefix'  prefix of the processed files (default mS_)
#        'species'     species of interest (i.e. reference species)
#        'removed'     directory within which the new output will be saved
#        'clean'       remove intermediate files after computation [yes/no]
5_path: './sortedMSA'
5_fileprefix: 'mS_'
5_removed: 'pruned'
5_clean: 'no'

### RULE REMOVE OPPOSITE STRAND ###
# If mafTools Strander fails to flip the sequences on the reverse strand in the alignment blocks,
# rmOppositeStrand will remove alignment block with sequences that are still on the reverse strand.
# Manual input:
#       'path',         Path to processed maf files
#       'fileprefix'    Prefix of processed files
#       'removed'       directory within which the new output will be saved
#       'clean'         remove intermediate files after computation [yes/no]
6_path: './pruned'
6_fileprefix: 'rmSP_mS_'
6_removed: 'forwardStrandOnly'
6_clean: 'no'

### RULE EXTRACT ANCESTOR ###
# Reconstructs the marked ancestor sequences in the preprocessed maf files using the identifiers
# and outputs per chromosome a fasta file of the ancestral sequence.
# Manual input:
#        'path',        Path to processed maf files
#        'fileprefix',  Prefix of the maf files from which the ancestor will be extracted
#        'ancestor'     Ancestor identifier of the ancestral sequence which should be retrieved.
#        'species'      Scientific name of the species of interest.
#        'generate'     generate", help="path to where the 'generate_ancestor.py' script is located
7_path: './forwardStrandOnly'
7_fileprefix: 'sus_scrofa_'
7_ancestor: 'Ancestor_Pig_Cow'
7_generate: './scripts'


####################
##### Step two #####
####################

### RULE CREATE PARAMETERS ###
# Creates the parameters needed for the simulation of variants. Stores the parameters per chromosome in logfiles.
# Manual input:
#         'ancestor',    path to ancestor folder
#         'genome',      path to (reference) genome folder
#         'chromosomes', list of chromosomes with an ancestral seq
#         'prefix',      prefix of ancestral files
#         'species',     name of reference species
#         'reference',   prefix of reference species files
8_ancestor: './output/extracted_ancestor/'
8_genome: './genome/'
8_chromosomes: '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,X'
8_prefix: 'Ancestor_Pig_Cow.'
8_reference: 'Sus_scrofa_ref_'
# preprocessing parameters within rule:
# use full path
8_ancGenome: 'Ancestor_Pig_Cow.$i\_chr$i'
# use $i as it will be a placeholder for chr. numbers in a loop
8_ancX: 'Ancestor_Pig_Cow.X_chrX.fa'
# full name of X file. remove full line if only autosomals are used

#### RULE APPLY PARAMETERS ###
# Applies the parameters from the previous step and simulates genetic variant based on those parameters. It creates on genome-wide vcf-file.
# Manual input:
#          'events',      number of events (variants) to simulate
#          'chroms',      chromosomes to be considered
#          'params_folder', folder with parameter files including prefix of files
#          'infile',      prefix of ancestral files
#          'outfile',     name of reference species
9_events: '10000000'
9_chroms: '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,X'
9_params_folder: 'logfiles/sus_scrofa_chr'
9_infile: 'genome/Sus_scrofa_ref.fa'
9_outfile: 'simVariants.vcf'


#### RULE SPLIT VCF ####
# splits the simulated variants into one vcf file with SNPs and one with indels
# Manual input:
#         'input',       name of input vcf file
#         'path',        path to location of vcf file
10_input: 'simVariants.vcf'
10_path: './'


#### RULE FILTER VCF ####
# filters the vcf files for variants that has a corresponding base pair position in the ancestral seqeuence
# and it not located in a gap
# Manual input:
#         'indels',      name of simulated indel variants
#         'snps',        name of simulated SNP variants
#         'ancestor',    path to ancestor genome files
11_indels: './indels_simVariants.vcf'
11_snps: 'snps_simVariants.vcf'
11_ancestor: './output/extracted_ancestor'

#### RULE CHECK SUBSTITUTION RATES ####
# goes through the created log files and the simulated variants and makes sure the simulation has been
# performed as intended.
# Manual input:
#         'infile',      name of (and path to) file with simulated variants
#         'logfiles',    path to folder with logfiles

12_infile: './data/simVariants.vcf'
12_logfiles: './output/logfiles'

####################
#### Step three ####
####################

### RULE CREATE DATAFILES ###
# Creates the datafiles needed for the visual summary report, and stores them in an R data clump.
# Manual input:
#         'vcf',         vcf with simulated variants
#         'snp',         vcf with simulated SNPs
#         'indels',      vcf with filtered snps
#         'snpFiltered',   vcf with filtered snps
#         'indelFiltered', vcf with filtered indels
#         'reference',   reference genome fasta index file
#         'chromosome',  number of chromosomes to extract from fasta index files (i.e. to exclude scaffolds)
#         'ancestor',    path to ancestor log files
#         'parameters',  log file with output from checked rates parameters
#         'simulated',   log file with output from checked rates simulated variants
#         'filtered',   log file with output from checked rates simulated variants filtered for ancestral position

13_vcf: './data/simVariants.vcf'
13_snp: './data/snps_simVariants.vcf'
13_indels: './data/indels_simVariants.vcf'
13_snpFiltered: './data/snps_simVariants_filtered.vcf'
13_indelFiltered: './data/indels_simVariants_filtered.vcf'
13_index: './output/extracted_ancestor/'
13_ancestor: './data/logfiles/'
13_parameters: './data/parameters.log'
13_simulated: './data/simVariants.log'
13_filtered: './data/snps_simVariants_filtered.log'

### RULE CREATE INPUT ###
# this config variable triggers whether or not a gff-file is available
# for visualisation of gene density.
# if yes, they will be visualised together with ancestral sequence density
# if no, only the available data produced in the pipeline will be visualised
#
# NOTE!! the gff file has to be present beforehand, eg, downloaded.
# many files can be found here: https://ftp.ensembl.org/pub/current_gff3/
# this script assumed the file is gzipped.
#
# Manual input:
#         'annotation',  Yes: gff file available; No: gff file unavailable
#         'gff',        full path and name of gff file (if available, will not be triggered if annotation:no)
#         'prefix',     prefix of gff file

14_annotation: 'Yes'
14_gff: 'Sus_scrofa.Sscrofa11.1.109.chr.gff3.gz'
14_prefix: 'Sus_scrofa.Sscrofa11.1.109.chr'

### RULE CREATE SUMMARY ###
# R markdown file that is knitted to an html output of all graphs and tables from previous step
#
# NOTE!: the newick tree has to be downloaded / created beforhand.
#        if a full tree is within the MSA file, this can be used (as a separate file)
#        and if available, ideograms can be downloaded from here:
#        https://genome.ucsc.edu/cgi-bin/hgTables
#        there will be a dummy variable created in the step before, named
#        "indexfile.txt" that will be used as the ideogram file
#
# Manual input:
#         'tree',        full path and newick tree of msa (if available, default 'None')
#         'ideogram',    name of ideogram file (automatically produced in a previous step)
#         'ingroup',     (scientific) name of ingroup (if tree available)
#         'outgroup',    (scientific) name of outgroup (if tree available)
#         'annotation',  name of CDS file (automatically produced in the previous step)
#         'bedfile'      name of Ancestor bed file (automatically produced in the previous step)

15_path: './'
15_tree: './data/43_eutherian_mammals_EPO_default.nh'
15_ideogram: 'indexfile.txt'
15_ingroup: 'sus scrofa'
15_outgroup: 'bos taurus'
15_annotation: 'CDS.regions.bed'
15_bedfile: 'Ancestor.bed'
15_coverage: 'coverage_CDS.bed'
