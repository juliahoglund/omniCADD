# -*- snakemake -*-

import sys
import os
import re
import subprocess

sys.path.append(os.path.abspath(os.path.join(os.path.realpath(workflow.basedir), "lib/")))
import cactuslib
# Add the path to the helper functions library and import it

#############################################################################
# Example cmd for mouse genome

# Need to first run the cactus-preprocess script to generate commands and cactus config files:
# cactus-prepare genomes.txt --outDir turtle-output --outSeqFile turtle-output/turtles.txt --outHal turtle-output/turtles.hal --jobStore jobstore --gpu --defaultCores 32

#############################################################################
# System setup

debug = False;

wd = config["working_dir"];
os.chdir(wd);
#print(os.getcwd());
# Switching to the working directory of the project so paths can be relative

TMPDIR = config["tmp_dir"];
# A directory with lots of space to use for temporary files generated by the cactus-align command

CACTUS_PATH = "singularity exec --nv --cleanenv " + config["cactus_path"];
CACTUS_PATH_TMP = "singularity exec --nv --cleanenv --bind " + TMPDIR + ":/tmp " + config["cactus_path"];
# The path to the cactus executable with and without a tmpdir binding
# Must be gpu enabled for now

#############################################################################
# Input files and output paths

INPUT_FILE = config["input_file"];
# The cactus input file used to generate the config file with cactus-prepare

OUTPUT_DIR = config["output_dir"];
# The output directory specified when cactus-prepare was run

OUTPUT_HAL = os.path.join(OUTPUT_DIR, config["final_hal"]);
OUTPUT_MAF = os.path.join(OUTPUT_DIR, config["final_hal"].replace(".hal", ".maf"));

CACTUS_FILE = os.path.join(OUTPUT_DIR, os.path.basename(INPUT_FILE));
#CONFIG_FILE = os.path.join(OUTPUT_DIR, "config-prepared.xml");
# The config files genearated from cactus-prepare
# config: XML config file probably read by some of the sub-programs...
# output: lists the sequence files expected as output for all nodes in the tree

#job_path = os.path.join(OUTPUT_DIR, "jobstore");
# The temporary/job directory specified in cactus-prepare

# final_hal_file = "turtles.hal";
# The final hal file generated on the root node -- currently still encoded as Anc00.hal

if config["use_gpu"]:
    GPU_OPT = "--gpu";
else:
    GPU_OPT = "";

#############################################################################
# Reading files

tips = {};
# The main dictionary hold information and file paths for tips in the tree:
# [output fasta file from mask step] : { 'input' : "original genome fasta file", 'name' : "genome name in tree", 'output' : "expected output from mask step (same as key)" }

first = True;
for line in open(INPUT_FILE):
    if not line.strip():
        continue;
    # Skip any blank lines

    if first:
        #tree = line.strip();
        first = False;
        continue;
    # The first line contains the input tree... skip

    line = line.strip().split("\t");
    cur_base = os.path.basename(line[1]);
    tips[line[0]] = { 'input' : [line[1]], 'name' : line[0], 'output' : "NA" };
## Read the genome names and original genome fasta file paths from the same cactus input file used with cactus-prepare

if debug:
    for g in tips:
        print(g, tips[g]);
    print("===================================================================================");




###############
"""
prepares all info needed for running cactus and updatng the alignment
singularity exec --cleanenv 
	--bind $PWD:/mnt cactus_v2.9.0.sif 
	cactus-update-prepare add node 
	/mnt/results/alignment/hal/43_mammals.epo/43_mammals.epo.1_1.hal 
	/mnt/input-seq.txt 
	--genome Eutheria 
	--outDir /mnt/steps/ 
	--jobStore /mnt/jobstore/
"""
rule cactus_prepare:
	input:
		hal = "results/alignment/hal/{alignment}/{part}.hal"
		seq = "input-seq.txt" 			# TODO: change to "/PATH/TO/INOUT/IN/CONFIG" 
	params:
		genome = "Eutheria"				# TODO: change to "NAME/OF/NODE/IN/CONFIG"
	container:
		"cactus_v2.2.0-gpu.sif"			# TODO: change this to path in config file, and mayeb if not wget else use??
	threads: 2
	output:
		outDir = "./steps"				# TODO: change to config, have these as defult in some way?
		jobStore = "./jobStore"
	shell:
		"cactus-update-prepare add node {input.hal} {input.seq}"
		" --genome {params.genome}"
		" --outDir {output.outDir}"
		" --jobStore {output.jobStore}"
















