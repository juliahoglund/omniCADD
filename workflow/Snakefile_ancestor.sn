# -*- snakemake -*-

'''
 The snakemake file goes through part 1 of extracting an ancestral sequence from a msa. 
 This file can/will be called from the snakefile, but can be run separately as shown below.
 The data directory should contain the msa files of the species of interest and a 'genome' folder containing the genome of the species of interest.
 The output directory should be empty, since here comes the outputs that the scripts generates.
 The scripts directory contains all the used scripts by the snakemake file.
 This pipeline takes in maf files. If the user has another file format, these whould be converter before, either with the emf2maf.pl script of with the msaconverter. The pipeline can be rune either with extracting a reconstructed ancestor, or by using an outgroup (i.e. related species with available data), with changing the config option.

 :Author: Seyan Hu
 :Date: 30-9-2022
 :Exttension and modification: Julia HÃ¶glund
 :Date: 1-4-2023
 :Usage: snakemake -p --snakefile <snakefile script> --config option='ancestor|outgroup'
 Params can be adjusted for any givenen species of interest. 
'''

## Targets
# Code collecting output files from this part of the pipeline
all_outputs.append('output/finished_mark_ancestor.txt', 'output/finished_apply_mafTools.txt', 'output/finished_sort_by_chromosome.txt', 'output/finished_sort_msa_blocks.txt', 'output/finished_removing_unwanted_species.txt', 'output/finished_remove_opposite_strand.txt', 'output/finished_extract_ancestor.txt')
    

## rules
rule all:
	input:
		'output/finished_extract_ancestor.txt'


if config['option'] == 'ancestor':

	rule mark_ancestor:
		input:
			SCRIPTS_1 + 'mark_ancestor.py'
		params:
			script = SCRIPTS_1 + 'mark_ancestor.py',
			inp_path = config['1_inp_path'],
			ancestor = config['1_ancestor'],
			file_ident = config['1_file_ident'],
			sp1 = config['1_sp1'],
			sp2 = config['1_sp2'],
			sp1_ab = config['1_sp1_ab'],
			sp2_ab = config['1_sp2_ab'],
			name_sp1 = config['species']
		output:
			'output/finished_mark_ancestor.txt'
		shell:
			'''
		  DIR=output

			if [ -d "$DIR" ]      
			then
				echo "$DIR exists. will not be created again"
			else
				mkdir $DIR
			fi

			python {params.script} \
			-p {params.inp_path} \
			-a {params.ancestor} \
			-i {params.file_ident} \
			-s {params.sp1},{params.sp2} \
			-c {params.sp1_ab},{params.sp2_ab} \
			-f {params.name_sp1}
			'''

elif config['option'] == 'outgroup':

	rule mark_outgroup:
		input:
			'workflow/step_1_extract_ancestor/scripts/mark_outgroup.py'
		params:
			script = 'workflow/step_1_extract_ancestor/scripts/mark_outgroup.py',
			inp_path = config['1_inp_path'],
			ancestor = config['1_1_ancestor'],
			file_ident = config['1_file_ident'],
			name_sp1 = config['species']
		output:
			'output/finished_mark_ancestor.txt'
		shell:
			'''
		  DIR=output

			if [ -d "$DIR" ]      
			then
				echo "$DIR exists. will not be created again"
			else
				mkdir $DIR
			fi

			python {params.script} \
			-p {params.inp_path} \
			-a {params.ancestor} \
			-i {params.file_ident} \
			-f {params.name_sp1}
			'''
else:
    sys.exit()


rule mafTools:
	input:
		'output/finished_mark_ancestor.txt'
	params:
		script = SCRIPTS_1 + 'apply_mafTools.py',
		marked = config['2_marked'],
		genome = config['2_genome'],
		order = config['2_order'],
		stranded = config['2_stranded'],
		rowpath = config['2_rowpath'],
		filtered = 'config['2_filtered'],
		clean = config['2_clean'],
		previous = config['2_previous'],
		awk = '{sub("/[^/]+$","")} 1'
	output:
		'output/finished_apply_mafTools.txt'
	shell:
		'''
		python {params.script} \
		-m {params.marked} \
		-g {params.genome} \
		-o {params.order} \
		-r {params.rowpath} \
		-s {params.stranded} \
		-c {params.clean} \
		-f {params.filtered} \
		-p {params.previous}
		mv `echo {params.marked} | awk '{params.awk}'` output/
		mv `echo {params.stranded} | awk '{params.awk}'` output/
		mv `echo {params.filtered} | awk '{params.awk}'` output/
		'''

rule sort_by_chromosome:
	input:
		'output/finished_apply_mafTools.txt'
	params:
		script = SCRIPTS_1 + 'sort_by_chromosome.py',
		path = config['3_path'],
		prefix = config['3_prefix'],
		ordered = config['3_ordered'],
		clean = config['3_clean'],
		species = config['species']
	output:
		'output/finished_sort_by_chromosome.txt'
	shell:
		'''
		python {params.script} \
		-s {params.species} \
		-k {params.chromosomes} \
		-p {params.path} \
		-f {params.prefix} \
		-o {params.ordered} \
		-c {params.clean}
		mv {params.path} output/
		'''

rule sort_msa_blocks:
	input:
		'output/finished_sort_by_chromosome.txt'
	params:
		script = SCRIPTS_1 + 'sort_msa_blocks.py',
		path = config['4_path'],
		species = config['species'],
		ordered = config['4_ordered'],
		clean = config['4_clean']
	output:
		'output/finished_sort_msa_blocks.txt'
	shell:
		'''
		python {params.script} \
		-p {params.path} \
		-s {params.species} \
		-o {params.ordered} \
		-c {params.clean}
		mv {params.path} output/
		'''

rule remove_species:
	input:
		'output/finished_sort_msa_blocks.txt'
	params:
		script = SCRIPTS_1 + 'remove_species.py',
		path = config['5_path'],
		fileprefix = config['5_fileprefix'],
		species = config['species'],
		removed = config['5_removed'],
		clean = config['5_clean']
	output:
		'output/finished_removing_unwanted_species.txt'
	shell:
		'''
		python {params.script} \
		-p {params.path} \
		-f {params.fileprefix} \
		-s {params.species} \
		-r {params.removed} \
		-c {params.clean}
		mv {params.path} output/
		'''

rule remove_opposite_strand:
	input:
		'output/finished_removing_unwanted_species.txt'
	params:
		script = SCRIPTS_1 + 'remove_opposite_strand.py',
		path = config['6_path'],
		fileprefix = config['6_fileprefix'],
		removed = config['6_removed'],
		clean = config['6_clean']

	output:
		'output/finished_remove_opposite_strand.txt'
	shell:
		'''
		python {params.script} \
		-p {params.path} \
		-f {params.fileprefix} \
		-r {params.removed} \
		-c {params.clean}
		mv {params.path} output/
		'''

rule wrapper_extract_ancestor:
	input:
		'output/finished_remove_opposite_strand.txt'
	params:
		script = SCRIPTS_1 + 'wrapper_extract_ancestor.py',
		path = config['7_path'],
		fileprefix = config['7_fileprefix'],
		ancestor = config['7_ancestor'],
		species = config['species'],
		generate = config['7_generate']
	output:
		'output/finished_extract_ancestor.txt'
	shell:
		'''
		python {params.script} \
		-p {params.path} \
		-f {params.fileprefix} \
		-a {params.ancestor} \
		-s {params.species} \
		-g {params.generate}

    DIR=output/extracted_ancestor

		if [ -d "$DIR" ]      
		then
			echo "$DIR exists. will not be created again"
		else
			mkdir $DIR
		fi

		mv processedMAFfiles/ output/
		mv {params.ancestor}* output/extracted_ancestor
		'''