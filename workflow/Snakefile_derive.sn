'''
 The snakemake file goes through the variant deriving. It makes use of the same reference genome from the previous steps
 as well as the extracted ancestral sequence, and compares the genomes to find out what nucleotide positions differs, 
 i.e. have been derived from the ancestral state. To filter for nearly-fixed variants, i.e. the ones that have been allowed
 to incerase in frequency in the reference, to near fixation, it makes use of a (self-provided) individual level vcf file,
 including genotype data, from which the allele frequencies are calculated. 
 The scripts directory contains all the used scripts by the snakemake file. 

 :Author: Seyan Hu
 :Date: 14-10-2022
 :Extension and modification: Julia Höglund
 :Date: 01-08-2023
 :Usage: snakemake -p --cores <number of cores> --snakefile <snakefile script>

 Params can be adjusted for any given species of interest. 
'''

## Targets
# Code collecting output files from this part of the pipeline
all_outputs.append('output/start_step4.txt')
all_outputs.append('output/finished_generating_frequencies.txt')
all_outputs.append('output/finished_generate_derived.txt')
#all_outputs.append('output/.txt')

## rules
rule frequencies:
    input: 
        SCRIPTS_4 + 'generate_frequencies.py'
    output: 
        'output/start_step4.txt'
    shell:
        '''
        touch output/start_step4.txt
        '''

	
'''	
 Generates frequency files from the population variants (vcf files).
 Population frequency files are used for the generation of the derived variants,
 in the step where the nearly-fixed variants are extracted from all the differing
 variants between ancestror and reference species.

 Manual input:	
				'vcf', 		    compressed (!) vcf containing variants from the whole population (one per chromosome). 
								including a wildcard ($i) instead of the name of the chromosome
 				'chromosomes', 	list of chromosomes from the given species of interest. 

'''
rule freq_files:
	input:
		'output/start_step4.txt'
	params:
		script = SCRIPTS_4 + 'generate_frequencies.py',
		vcf = config['15_vcf'],
		chromosome = config['16_chromosome']
	output:
		'output/finished_generating_frequencies.txt'
	shell:
		'''
		for i in {{{params.chromosome}}}; do \
		python {params.script} \
		-v {params.vcf} \
		-c $i; done

		mkdir output/frequencies
		mv *.out output/frequencies
		'''


'''
 Generates the derived variants by looking at all data sources (ancestral seq, genome, freq files) simultaneously.
 Manual input:	
				'chromosome'	list of chromosomes from which the variants are going to be derived
				'ancestor', 	path to the folder with the extracted ancestor
				'genome'		path to the reference genome folder
				'frequency'		path to folder with frequency files
				'start'			start position of the region
'''
rule generate_derived:
	input:
		'output/finished_generating_frequencies.txt'
	params:
		script = SCRIPTS_4 + 'derive_variants.py',
		chromosome = config['17_chromosome'],
		ancestor = config['17_ancestor'],
		genome = config['17_genome'],
		frequency = config['17_frequency'],
		start = config['17_start']
	output:
		'output/finished_generate_derived.txt'
	shell:
		'''
		python {params.script} \
		-c {params.chromosome} \
		-a {params.ancestor} \
		-g {params.genome} \
		-f {params.frequency} \
		-s {params.start}

		mkdir output/derived
		mv derived_* output/derived/
		'''


'''
 Trims lines in simulated vcf file to match with the number of lines in the derived vcf files.
  Manual input:	
				'simulated', 	path to folder containing the vcf with simulated variants. 
 				'derived', 	    path to folder containing the vcfs with derived variants. 
 				'prefixSimulated' path to derived variants.
				'prefixDerived' prefix to simulated variant file(s).

'''
rule trim_vcf:
	input:
		'output/finished_generate_derived.txt'
	params:
		script = SCRIPTS_4 + 'trim_variants.py',
		simulated = config['18_simulated'],
		derived = config['18_simulated'],
		prefixSimulated = config['18_prefixSimulated'],
		prefixDerived = config['18_prefixDerived']
	output:
		'output/finished_simulated_vcf_trimming.txt'
	shell:
		'''
		python {params.script} \
		-s {params.simulated} \
		-d {params.derived} \
		-p {params.prefixSimulated} \
		-q {params.prefixDerived}

		trimmedFile=trimmed_{{params.prefixSimulated}}filtered.vcf
		cat $trimmedFile | awk '$1 ~ /^#/ {print $0;next} {print $0 | "sort -k1,1 -k2,2n"}' > tmp
		mv tmp $trimmedFile

		# CHOP SIMULATED VARIANTS TO CHROMOSOMES
        # FORMAT should only be there if there actually are some sample columns after it. 
        # (The message is misleading in this context — what it's looking for is \tFORMAT\t)

        bgzip $trimmedFile
        tabix $trimmedFile.gz

        in=$trimmedFile.gz
		out=simSNPs

		for i in {1..22} X; do bcftools view ${in} --regions ${i} -o ${out}_${i}.vcf.gz -Oz; done
		gunzip simSNPs_*

		mkdir output/simulated
		mv simSNPs_* output/simulated

		'''
