#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
:Author: Christian Gross
:Contact: cgross@tudelft.nl
:Date: 30-01-2017
This script takes as input the path to the folder containing maf files
generated by a MSA pipeline such as the Ensembl EPO pipeline. Each file
will be read and then sorted and stored according to the sequence of interest
if available.
When finished all alignments with the sequence of interest are in the relevant
chromosome output file.

:Edited by: Job van Schipstal 
 :Date: 26-9-2023
:Example: python chr_sorting.py --species mm39 -i file1 ... file_n -o file...
- Removed redundant code
- Expects list of input and output files via argparse,
instead of searching for files in a given folder.

:Extension and modification: Julia HÃ¶glund
:Date: 31-10-2023
"""
# Import dependencies
import gzip
import re
import sys
from collections import defaultdict
from argparse import ArgumentParser
import lz4.frame

PARSER = ArgumentParser(description=__doc__)
PARSER.add_argument("-i", "--input",
    help = "maf alignment file(s) which are to be sorted by chromosome", 
    type = str, 
    required = True, 
    nargs = "+")
PARSER.add_argument("-s", "--species",
    help = "name/label of the species by which the alignments should be sorted", 
    type = str, 
    required = True)
PARSER.add_argument("-a", "--ancestor",
    help = "name/label of the ancestor to keep in the alignment", 
    type = str, 
    required = True)
PARSER.add_argument("-c", "--chromosomes",
    help = "list of chromosome(s) based on which the alignments will be sorted", 
    type = str, 
    required = True,
    nargs = "+")

if __name__ == '__main__':
    args = PARSER.parse_args()

    file_list = args.input

    chr_list = {}
    for chromosome in args.chromosomes:
        chr_list[chromosome] = open("chr" + str(chromosome) + ".maf", "a")
        chr_list[chromosome].write("##maf version=1\n\n")

    try:
        for maf_f in file_list:
            print('Processing file: {}'.format(maf_f))

            if maf_f.endswith(".gz"):
                open_f = gzip.open(maf_f, "rt")
            elif maf_f.endswith(".lz4"):
                open_f = lz4.frame.open(maf_f, mode="rt")
            else:
                open_f = open(maf_f, "r")

            with open_f as f:
                ident_chr = "not_present"
                blocks = ""
                line = f.readline()  # header
                line = f.readline()  # newline

                while line != "":
                    line = f.readline()
                    if "a " in line:
                        switch = 0
                        blocks = ""
                        blocks += line
                    elif "s " in line:
                        blocks += line
                        if str(args.species) in line:
                            ident_chr = line.split()[1].split('.')[1]
                    else:
                        switch = 1
                    if switch == 1:
                        if ident_chr in chr_list:
                            blocks += '\n'
                            chr_list[ident_chr].write(blocks)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        for chromosome in chr_list:
            chr_list[chromosome].close()